#!/usr/bin/env python3
"""
Script de demostraci√≥n para las funcionalidades de descarga hist√≥rica
"""

import requests
import json
from datetime import datetime, timedelta

def demo_historical_downloads():
    """Demuestra las nuevas funcionalidades de descarga hist√≥rica"""
    
    base_url = "http://127.0.0.1:8000"
    
    print("üéØ DEMOSTRACI√ìN: Descarga de Datos Hist√≥ricos")
    print("=" * 60)
    
    # 1. Descarga hist√≥rica - √∫ltimos 7 d√≠as
    print("\nüìÖ 1. Descarga hist√≥rica - √öltimos 7 d√≠as")
    print("-" * 40)
    
    try:
        response = requests.get(f"{base_url}/download/historical?days=7&format=json", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Descargados {len(data)} art√≠culos de los √∫ltimos 7 d√≠as")
            
            # Mostrar algunos ejemplos
            if data:
                print("\nüì∞ Ejemplos de art√≠culos:")
                for i, article in enumerate(data[:3]):
                    print(f"   {i+1}. {article['titulo'][:50]}...")
                    print(f"      Fuente: {article['fuente']}")
                    print(f"      Fecha: {article['creado'][:10]}")
                    print()
        else:
            print(f"‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 2. Descarga por fuente espec√≠fica
    print("\nüì∞ 2. Descarga por fuente espec√≠fica - BBC Mundo")
    print("-" * 40)
    
    try:
        response = requests.get(f"{base_url}/download/historical?days=3&source=bbc_mundo&format=csv", timeout=10)
        if response.status_code == 200:
            lines = response.text.strip().split('\n')
            print(f"‚úÖ Descargados {len(lines)-1} art√≠culos de BBC Mundo (√∫ltimos 3 d√≠as)")
            print("   Formato: CSV")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 3. Descarga por fecha espec√≠fica
    print("\nüìÜ 3. Descarga por fecha espec√≠fica")
    print("-" * 40)
    
    # Usar fecha de ayer
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    try:
        response = requests.get(f"{base_url}/download/by-date?date={yesterday}&format=json", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Descargados {len(data)} art√≠culos del {yesterday}")
            
            if data:
                print("\nüì∞ Art√≠culos del d√≠a:")
                for i, article in enumerate(data[:2]):
                    print(f"   {i+1}. {article['titulo'][:40]}...")
                    print(f"      Autor: {article['autor']}")
                    print(f"      Secci√≥n: {article['seccion']}")
                    print()
        else:
            print(f"‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 4. Estad√≠sticas de la base de datos
    print("\nüìä 4. Estad√≠sticas de la base de datos")
    print("-" * 40)
    
    try:
        response = requests.get(f"{base_url}/api/articles?per_page=100", timeout=10)
        if response.status_code == 200:
            data = response.json()
            articles = data['articles']
            
            print(f"‚úÖ Total de art√≠culos disponibles: {len(articles)}")
            
            # Contar por fuente
            sources = {}
            for article in articles:
                source = article['source'] or 'Manual'
                sources[source] = sources.get(source, 0) + 1
            
            print("\nüì∞ Distribuci√≥n por fuente:")
            for source, count in sources.items():
                print(f"   ‚Ä¢ {source}: {count} art√≠culos")
            
            # Contar favoritos
            favorites = sum(1 for article in articles if article.get('favorito'))
            print(f"\n‚≠ê Art√≠culos favoritos: {favorites}")
            
        else:
            print(f"‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 5. URLs de descarga disponibles
    print("\nüîó 5. URLs de descarga disponibles")
    print("-" * 40)
    
    print("üì• Descargas hist√≥ricas:")
    print(f"   ‚Ä¢ √öltimos 7 d√≠as (CSV): {base_url}/download/historical?days=7&format=csv")
    print(f"   ‚Ä¢ √öltimos 7 d√≠as (JSON): {base_url}/download/historical?days=7&format=json")
    print(f"   ‚Ä¢ √öltimos 30 d√≠as (CSV): {base_url}/download/historical?days=30&format=csv")
    print(f"   ‚Ä¢ BBC Mundo √∫ltimos 3 d√≠as: {base_url}/download/historical?days=3&source=bbc_mundo&format=csv")
    
    print("\nüìÜ Descargas por fecha:")
    print(f"   ‚Ä¢ Por fecha espec√≠fica (CSV): {base_url}/download/by-date?date=YYYY-MM-DD&format=csv")
    print(f"   ‚Ä¢ Por fecha espec√≠fica (JSON): {base_url}/download/by-date?date=YYYY-MM-DD&format=json")
    
    print("\nüìä Descargas completas:")
    print(f"   ‚Ä¢ Todos los art√≠culos (CSV): {base_url}/download/csv")
    print(f"   ‚Ä¢ Todos los art√≠culos (JSON): {base_url}/download/json")
    
    print("\n" + "=" * 60)
    print("üéâ ¬°Demostraci√≥n completada!")
    print("\nüí° Consejos de uso:")
    print("   ‚Ä¢ Usa la interfaz web para descargas interactivas")
    print("   ‚Ä¢ Los archivos se descargan autom√°ticamente")
    print("   ‚Ä¢ Los nombres incluyen fecha y hora de descarga")
    print("   ‚Ä¢ Puedes filtrar por fuente y per√≠odo espec√≠fico")
    print("   ‚Ä¢ Los datos incluyen informaci√≥n de favoritos")

def main():
    """Funci√≥n principal"""
    try:
        demo_historical_downloads()
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")

if __name__ == "__main__":
    main()
